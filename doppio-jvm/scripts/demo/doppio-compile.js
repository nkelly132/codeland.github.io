// Generated by CoffeeScript 1.6.3
(function() {
  "use strict";
  var bs_cl, compileAndRun, controller, editor, init_editor, load_mini_rt, progress, read_classfile, root, stdout, user_input;

  root = this;

  stdout = null;

  user_input = null;

  controller = null;

  editor = null;

  progress = null;

  bs_cl = null;

  read_classfile = function(cls, cb, failure_cb) {
    var data, e, fullpath, path, _i, _len, _ref;
    cls = cls.slice(1, -1);
    _ref = jvm.system_properties['java.class.path'];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      path = _ref[_i];
      fullpath = "" + path + cls + ".class";
      try {
        data = util.bytestr_to_array(node.fs.readFileSync(fullpath));
      } catch (_error) {
        e = _error;
        data = null;
      }
      if (data !== null) {
        return cb(data);
      }
    }
    return failure_cb(function() {
      throw new Error("Error: No file found for class " + cls + ".");
    });
  };

  load_mini_rt = function() {
    var data, done, e, end_untar, file_count, start_untar, writeOneFile;
    try {
      data = node.fs.readFileSync("/home/doppio/scripts/demo/mini-rt.tar");
    } catch (_error) {
      e = _error;
      console.error(e);
    }
    if (data === null) {
      throw new Error("No mini-rt data");
    }
    file_count = 0;
    done = false;
    start_untar = (new Date()).getTime();
    writeOneFile = function(percent, path, file) {
      var base, base_dir, cls, ext, _ref;
      base_dir = 'vendor/classes/';
      _ref = path.split('.'), base = _ref[0], ext = _ref[1];
      file_count++;
      cls = base.substr(base_dir.length);
      return node.fs.writeFileSync(path, util.array_to_bytestr(file), 'utf8', true);
    };
    untar(new util.BytesArray(util.bytestr_to_array(data)), writeOneFile);
    end_untar = (new Date()).getTime();
    return console.log("Untarring took a total of " + (end_untar - start_untar) + "ms.");
  };

  compileAndRun = function() {
    var class_args, cname, compile_finished_cb, contents, exec_finish_cb, fname, msg, stdin;
    fname = "Student.java";
    cname = fname.slice(0, -5);
    console.log(cname);
    contents = editor.getSession().getValue();
    root.saveFile(fname, contents);
    msg = '';
    stdout = function(str) {
      msg += str;
      console.log(str);
      return $('#messages').text(msg);
    };
    stdin = function() {
      return "\n";
    };
    class_args = [fname];
    exec_finish_cb = function() {
      root.rs = null;
      return console.log('Done');
    };
    compile_finished_cb = function() {
      root.rs = null;
      if (msg.length === 0) {
        return root.exec(stdout, stdin, cname, class_args, exec_finish_cb);
      }
    };
    return root.compile(stdout, fname, compile_finished_cb);
  };

  init_editor = function() {
    var JavaMode;
    editor = ace.edit('source');
    JavaMode = require("ace/mode/java").Mode;
    editor.getSession().setMode(new JavaMode());
    return editor.getSession().setValue("public class Student {\n  public static void main(String[]args) {\n    System.out.println(\"Args=\"+args[0]);\n  }\n}");
  };

  root.preload = function() {
    load_mini_rt();
    init_editor();
    root.bs_cl = new ClassLoader.BootstrapClassLoader(read_classfile);
    $('#run_btn').click(function(e) {
      compileAndRun();
      return e.preventDefault();
    });
    return $('#abort_btn').click(function(e) {
      var cb;
      console.log('abort button clicked');
      if (root.rs) {
        $('#messages').text('Stopping ...');
        cb = function() {
          return $('#messages').text('Stopped');
        };
        root.rs.async_abort(cb);
      } else {
        console.log('but nothing to do');
      }
      return e.preventDefault();
    });
  };

  $(document).ready(function() {
    return root.preload();
  });

  root.rs = null;

  root.saveFile = function(fname, contents) {
    if (contents[contents.length - 1] !== '\n') {
      contents += '\n';
    }
    node.fs.writeFileSync(fname, contents);
    return console.log("File saved as '" + fname + "'.");
  };

  root.compile = function(stdout, fname, finish_cb) {
    var args, my_cb, rs, start_compile, useECJ;
    $('#messages').text("Compiling " + fname + " ...");
    start_compile = (new Date()).getTime();
    jvm.set_classpath('/home/doppio/vendor/classes/', './:/home/doppio');
    user_input = function(resume) {
      return resume('');
    };
    rs = new runtime.RuntimeState(stdout, user_input, root.bs_cl);
    root.rs = rs;
    args = [fname];
    my_cb = function(success) {
      var end_compile;
      end_compile = (new Date()).getTime();
      root.rs = null;
      console.log("javac took a total of " + (end_compile - start_compile) + "ms.");
      if (success) {
        $('#messages').text('Compilation complete');
      } else {
        $('#messages').text('');
      }
      return finish_cb();
    };
    useECJ = true;
    if (useECJ) {
      jvm.system_properties['jdt.compiler.useSingleThread'] = true;
      jvm.run_class(rs, 'org/eclipse/jdt/internal/compiler/batch/Main', args, my_cb);
    } else {
      jvm.run_class(rs, 'classes/util/Javac', args, my_cb);
    }
  };

  root.exec = function(stdout, stdin, class_name, class_args, finish_cb) {
    var rs;
    $('#messages').text("Running " + class_name);
    rs = new runtime.RuntimeState(stdout, stdin, root.bs_cl);
    jvm.run_class(rs, class_name, class_args, finish_cb);
    $('#messages').text('');
  };

  root.abortjvm = function() {
    return alert('Abort! Abort! Not Yet..');
  };

}).call(this);

/*
//@ sourceMappingURL=doppio-compile.map
*/
