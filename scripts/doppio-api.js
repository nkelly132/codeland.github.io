// Generated by CoffeeScript 1.6.3
(function() {
  "use strict";
  window.DoppioApi = (function() {
    /*
        A class to interact with doppio with.
        Do not call the constructor until the document is ready.
    */

    function DoppioApi() {
      this.load_mini_rt();
      return;
    }

    DoppioApi.prototype.read_classfile = function(cls, cb, failure_cb) {
      var data, e, fullpath, path, _i, _len, _ref;
      cls = cls.slice(1, -1);
      _ref = jvm.system_properties['java.class.path'];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        path = _ref[_i];
        fullpath = "" + path + cls + ".class";
        try {
          data = util.bytestr_to_array(node.fs.readFileSync(fullpath));
        } catch (_error) {
          e = _error;
          data = null;
        }
        if (data !== null) {
          return cb(data);
        }
      }
      return failure_cb(function() {
        throw new Error("Error: No file found for class " + cls + ".");
      });
    };

    DoppioApi.prototype.load_mini_rt = function() {
      var data, done, e, end_untar, file_count, start_untar, writeOneFile;
      try {
        data = node.fs.readFileSync("/home/doppio/scripts/demo/mini-rt.tar");
      } catch (_error) {
        e = _error;
        console.error(e);
      }
      if (data === null) {
        throw new Error("No mini-rt data");
      }
      file_count = 0;
      done = false;
      start_untar = (new Date()).getTime();
      writeOneFile = function(percent, path, file) {
        var base, base_dir, cls, ext, _ref;
        base_dir = 'vendor/classes/';
        _ref = path.split('.'), base = _ref[0], ext = _ref[1];
        file_count++;
        cls = base.substr(base_dir.length);
        return node.fs.writeFileSync(path, util.array_to_bytestr(file), 'utf8', true);
      };
      untar(new util.BytesArray(util.bytestr_to_array(data)), writeOneFile);
      end_untar = (new Date()).getTime();
      return console.log("Untarring took a total of " + (end_untar - start_untar) + "ms.");
    };

    DoppioApi.prototype.compileAndRun = function(studentCode) {
      var class_args, cname, compile_finished_cb, exec_finish_cb, fname, msg, stdin, stdout;
      fname = "Student.java";
      cname = fname.slice(0, -5);
      console.log(cname);
      this.saveFile(fname, studentCode);
      msg = '';
      stdout = function(str) {
        msg += str;
        console.log(str);
        return str;
      };
      stdin = function() {
        return "\n";
      };
      class_args = [fname];
      exec_finish_cb = function() {
        console.log('Done');
      };
      compile_finished_cb = function() {
        console.log("Compilation Finished");
        if (msg.length === 0) {
          return this.exec(stdout, stdin, cname, class_args, exec_finish_cb);
        }
      };
      return this.compile(stdout, fname, compile_finished_cb.bind(this));
    };

    DoppioApi.prototype.saveFile = function(fname, contents) {
      if (contents[contents.length - 1] !== '\n') {
        contents += '\n';
      }
      node.fs.writeFileSync(fname, contents);
      return console.log("File saved as '" + fname + "'.");
    };

    DoppioApi.prototype.compile = function(stdout, fname, finish_cb) {
      var args, bs_cl, my_cb, rs, start_compile, user_input;
      console.log("Compiling " + fname + " ...");
      start_compile = (new Date()).getTime();
      jvm.set_classpath('/home/doppio/vendor/classes/', './:/home/doppio');
      user_input = function(resume) {
        return resume('');
      };
      bs_cl = new ClassLoader.BootstrapClassLoader(this.read_classfile);
      rs = new runtime.RuntimeState(stdout, user_input, bs_cl);
      args = [fname];
      my_cb = function() {
        var end_compile;
        end_compile = (new Date()).getTime();
        console.log("javac took a total of " + (end_compile - start_compile) + "ms.");
        console.log('Compilation complete');
        return finish_cb();
      };
      jvm.run_class(rs, 'classes/util/Javac', args, my_cb);
    };

    DoppioApi.prototype.exec = function(stdout, stdin, class_name, class_args, finish_cb) {
      var bs_cl, rs;
      console.log("Running " + class_name);
      bs_cl = new ClassLoader.BootstrapClassLoader(this.read_classfile);
      rs = new runtime.RuntimeState(stdout, stdin, bs_cl);
      jvm.run_class(rs, class_name, class_args, finish_cb);
    };

    return DoppioApi;

  })();

}).call(this);

/*
//@ sourceMappingURL=doppio-api.map
*/
