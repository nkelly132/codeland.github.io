// Generated by CoffeeScript 1.6.3
(function() {
  "use strict";
  var deepcopy, root;

  root = typeof exports !== "undefined" && exports !== null ? exports : this.codeland = {};

  root.UIcont = null;

  root.initialize = function(UIcont) {
    var player;
    root.loadJSONConfigs();
    root.UIcont = UIcont;
    player = root.getPlayer();
    return root.drawGameMap(player);
  };

  root.reference = function() {};

  root.drawGameMap = function(player) {
    var addGameToMap, descriptions, game, gameSequence, mapDiv, sel, _i, _len;
    descriptions = root.getGameDescriptions();
    mapDiv = $(root.UIcont);
    mapDiv.empty();
    gameSequence = root.getGameSequence();
    sel = new gameSelector(mapDiv, false);
    addGameToMap = function(game) {
      return sel.buildDiv(game, descriptions[game], player.games[game], root.canPlay(game), codeland);
    };
    for (_i = 0, _len = gameSequence.length; _i < _len; _i++) {
      game = gameSequence[_i];
      addGameToMap(game);
    }
  };

  root.startGame = function(game) {
    var description, env, gamediv, managerString, tmp1;
    console.log("Starting " + game);
    if (root.currentGame) {
      root.currentGame.finishGame();
    }
    gamediv = $(root.UIcont);
    tmp1 = document.getElementById("gameSelection");
    root.UIcont.removeChild(tmp1);
    description = root.getGameDescriptions()[game];
    env = {
      key: game,
      description: description,
      visualMaster: root.visualMaster,
      frameRate: root.visualMaster.frameRate,
      gamediv: gamediv,
      player: root.getPlayer(),
      codeland: this
    };
    managerString = description != null ? description.manager != null ? description.manager : description.manager = 'GameManager' : void 0;
    root.currentGame = new window[managerString](env);
    return root.currentGame.startGame();
  };

  deepcopy = function(src) {
    return $.extend(true, {}, src);
  };

  if (console.log === null) {
    console.log = function() {};
  }

  root.getString = function(key) {
    return localStorage.getItem(key);
  };

  root.setString = function(key, value) {
    return localStorage.setItem(key, value);
  };

  root.clearString = function(key) {
    return localStorage.removeItem(key);
  };

  root.load = function(key) {
    var result, val;
    val = root.getString(key);
    if (val == null) {
      return null;
    }
    result = JSON.parse(val);
    if (result != null) {
      return result;
    }
    throw new Error("Could not parse " + val);
  };

  root.store = function(key, val) {
    if (val == null) {
      throw new Error("Value must exist");
    }
    root.setString(key, JSON.stringify(val));
  };

  root.storeGameCompletionData = function(key, data) {
    if (!((key != null) && (data != null))) {
      throw new Error("Cannot be null");
    }
    root.updatePlayer(function(p) {
      return p.games[key] = data;
    });
    root.showMap();
  };

  root.showMap = function() {
    root.drawGameMap(root.getPlayer());
  };

  root.getGame = function() {
    return getPlayer().currentGame;
  };

  root.getPlayer = function() {
    if (root.currentPlayer == null) {
      root.currentPlayer = root.load("CurrentPlayer");
    }
    return root.currentPlayer != null ? root.currentPlayer : root.currentPlayer = {
      id: +(new Date()),
      currentGame: '',
      first: '',
      last: '',
      avator: 'generic',
      games: {
        java1a: {
          hiscore: 20,
          stars: 1,
          passed: true
        }
      }
    };
  };

  root.updatePlayer = function(callback) {
    var player;
    player = root.getPlayer();
    callback(player);
    root.store("CurrentPlayer", player);
  };

  root.clearPlayer = function() {
    root.clearString("CurrentPlayer");
  };

  root.loadJSONConfigs = function() {
    if (root.gameDescriptions == null) {
      root.gameDescriptions = {};
    }
    jQuery.ajax({
      dataType: 'json',
      url: 'config/quest1.json',
      async: false,
      success: function(data) {
        var game, _i, _len, _ref;
        _ref = data.games;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          game = _ref[_i];
          jQuery.ajax({
            dataType: 'json',
            url: "config/" + game + ".json",
            async: false,
            success: function(gameData) {
              root.gameDescriptions[game] = gameData;
            }
          });
        }
      }
    });
    jQuery.ajax({
      dataType: 'json',
      url: 'config/visualMaster.json',
      async: false,
      success: function(data) {
        root.visualMaster = data;
      }
    });
  };

  root.getGameDescriptions = function() {
    if (root.gameDescriptions != null) {
      return root.gameDescriptions;
    }
    root.loadJSONConfigs();
    return root.gameDescriptions;
  };

  root.getGameSequence = function() {
    var addGame, g, games, ignore,
      _this = this;
    if (root.gameSequence) {
      return root.gameSequence;
    }
    root.gameSequence = [];
    games = root.getGameDescriptions();
    addGame = function(name) {
      var doFirst, g, _base, _i, _len;
      if ($.inArray(name, root.gameSequence) !== -1) {
        return;
      }
      doFirst = (_base = games[name]).depends != null ? (_base = games[name]).depends : _base.depends = [];
      for (_i = 0, _len = doFirst.length; _i < _len; _i++) {
        g = doFirst[_i];
        addGame(g);
      }
      root.gameSequence.push(name);
    };
    for (g in games) {
      ignore = games[g];
      addGame(g);
    }
    return root.gameSequence;
  };

  root.canPlay = function(game) {
    var depends, g, passCount, player, _i, _len, _ref, _ref1, _ref2;
    player = root.getPlayer();
    if (player != null ? (_ref = player.games[game]) != null ? _ref.passed : void 0 : void 0) {
      return true;
    }
    depends = (_ref1 = root.getGameDescriptions()[game]) != null ? _ref1.depends : void 0;
    if (!depends) {
      return true;
    }
    passCount = 0;
    for (_i = 0, _len = depends.length; _i < _len; _i++) {
      g = depends[_i];
      if (player != null ? (_ref2 = player.games[g]) != null ? _ref2.passed : void 0 : void 0) {
        passCount++;
      }
    }
    return passCount === depends.length;
  };

}).call(this);

/*
//@ sourceMappingURL=codeland.map
*/
